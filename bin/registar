#!/usr/bin/env ruby
#
#   Author: Rohith
#   Date: 2014-10-10 20:53:59 +0100 (Fri, 10 Oct 2014)
#
#  vim:ts=2:sw=2:et
#
$:.unshift File.join(File.dirname(__FILE__),'.','../lib')
require 'rubygems' if RUBY_VERSION < '1.9.0'
require 'service-registar'
require 'optionscrapper'

module ServiceRegistar
  class Registrator
    def initialize
      begin
        parser.parse!
        send options[:command] if options[:command]
      rescue SystemExit => e
        exit e.status
      rescue Exception => e
        parser.usage e.message
      end
    end

    private
    def run
      registar = ServiceRegistar.new options
      registar.run
    end

    def options
      @options ||= {}
    end

    def parser
      parser ||= OptionScrapper.new do |o|
        o.on( '-c CONFIG', '--config CONFIG', 'the configuration file for the registration service' ) { |x| options['config'] = x }
        o.on( '-v', '--verbose', 'switch into verbose logging mode' ) { |x| options['verbose'] = true }
        o.command :run, 'start daemon service and push services to the backend' do
          o.on( '-i MS', '--interval MS', 'specify the interval between pushing services' ) { |x| options['interval'] = x.to_i }
          o.on( '-B BACKEND', '--backend BACKEND', 'specify the service discovery backend' ) { |x| options['backend'] = x }
          o.on( '-l FILE', '--log FILE', 'the path for the log file to use' ) { |x| options['log'] = x }
          o.on( '-t MS', '--ttl MS', 'the time to live for services in service discovery, in ms') { |x| options['ttl'] = x.to_i }
          o.on( '-D FILE', '--docker FILE', 'the location of the docker socket file' ) { |x| options['docker'] = x }
          o.on_command { options[:command] = :run }
        end
      end
    end
  end
end

ServiceRegistar::Registrator.new
